* websocket

it is commonly used by single-page apps (SPAs) and mobile apps, to add server-push based functionality

* k6

Grafana k6 is an open-source load testing tool that makes performance testing easy and productive for engineering teams

load testing websockets with k6

Prometheus, Datadog

** features

1. cli
2. js (local/remote modules)
3. checks/thresholds

** use cases

1. load testing
2. performance and synthetic monitoring
3. chaos and reliability testing


** what k6 does not


1. not run natively in a browser
   xk6-browser
2. not run in NodeJS


** results

[[./images/k6-results-diagram.webp]]

** vus

import http from 'k6/http';
import { sleep } from 'k6';

export default function () {
  http.get('https://test.k6.io');
  sleep(1);
}

k6 run --vus 10 --duration 30s script.js

vus: virtual users

Scripts are written in JavaScript, as ES6 modules.

** init context, default function

init code

VU code, which makes requests

every test also has a default function

** options

instead of typing --vus and --duration each time you run the script, you can include the options in your JavaScript file.

import http from 'k6/http';
import { sleep } from 'k6';
export const options = {
  vus: 10,
  duration: '30s',
};
export default function () {
  http.get('http://test.k6.io');
  sleep(1);
}


** stages: ramping up/down VUs

you can ramp the number of VUs up and down during the test

use the options.stages property

export const options = {
  stages: [
    { duration: '30s', target: 20 },
    { duration: '1m30s', target: 10 },
    { duration: '20s', target: 0 },
  ],
};

** execution modes

1. local
2. distributed
3. cloud



** test life cycle


** websocket

import ws from 'k6/ws';
import { check } from 'k6';

export default function () {
  const url = 'ws://echo.websocket.org';
  const params = { tags: { my_tag: 'hello' } };

  const res = ws.connect(url, params, function (socket) {
    socket.on('open', () => console.log('connected'));
    socket.on('message', (data) => console.log('Message received: ', data));
    socket.on('close', () => console.log('disconnected'));
  });

  check(res, { 'status is 101': (r) => r && r.status === 101 });
}

The primary difference is that instead of continuously looping the main function over and over, each VU is now runs an asynchronous event loop.

when the websocket connection is created, the run function will be immediately called, all code inside it will be executed (usually code to set up event handlers), and then blocked until the WebSocket connection is closed.

*** error handling

to catch errors happen during the life of a WebSocket connection, attach a handler to the "error" event:

    socket.on('error', function (e) {
      if (e.error() != 'websocket: close sent') {
        console.log('An unexpected error occured: ', e.error());
      }
    });

*** timers

*** timeouts

*** multiple event handlers

you can attach multiple handler functions to an event


* rfc

** abstract

the security model used for this is the origin-based security model commonly used by web browsers.

the protocol consists of an opening handshake followed by basic message framing, layered over TCP.

the goal of this technology is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections. (using XMLHttpRequest or <iframe>s and long polling)

** introduction

** websockett URIs

** opening handshake

** data framing

*** overview

In the WebSocket Protocol, data is transmitted using a sequence of frames.

To avoid confusing network intermediaries (such as intercepting proxies) and for security reasons that are further discussed in 10.3.

A client MUST mask all frames that it sends to the server (5.3).

The server MUST close the connection upon receiving a frame that is not masked.

In this case, a server MAY send a Close frame with a status code of 1002 (protocol error) as defined in 7.4.1.

A server MUST NOT mask any frames that it sends to the client.

A client MUST close a connection if it detects a masked frame.

In this case, it MAY use the status code 1002 as defined in 7.4.1.


The base framing protocol defines a frame type with an opcode, a payload length, and designated locations for "extension data" and "application data", which together define the "payload data".

certain bits and opcodes are reserved for future expansion of the protocol.

a data frame MAY be transmitted by either the client or the server at any time after opening handshake completion and before the endpoint has sent a Close frame.


*** base framing protocol

this wire format for the data transfer part is described by the ABNF RFC5234 given in detail in this section.

the ABNF in this section is operating on groups of bits.

**** FIN: 1 bit

indicates that this is the final fragment in a message.

**** RSV 1,2,3: 1 bit each

must be 0 unless an extension is negotiated that defines meanings for non-zero values.

**** Opcode: 4 bits

defines the interpretation of the "Payload data".

1. %x0 denotes a continuation frame
2. %x1 denotes a text frame
3. %x2 denotes a binary frame
4. %x3-7 are reserved for further non-control frames
5. %x8 denotes a connection close
6. %x9 denotes a ping
7. %xA denotes a pong
8. %xB-F are reserved for further control frames

**** Mask: 1 bit

defines the "Payload data" is masked. If set to 1, a masking key is present in masking-key, and this is used to unmask the "Payload data" as per 5.3. All frames sent from client to server have this bit set to 1.

**** Masking-key: 0 or 4 bytes

all frames sent from the client to the server are masked by a 32-bit value that is contained within the frame.

this field is present if the mask bit is set to 1 and is absent if the mask bit is set to 0.

**** payload data: (x+y) bytes

the "payload data" is defined as "extension data" concatenated with "application data".

**** extension data: x bytes

the "extension data" is 0 bytes unless an extension has been negotiated.

any extension MUST specify the length of the "extension data", or how that length may be calculated, and how the extension use MUST be negotiated during the opening handshake.

if present, the "extension data" is included in the total payload length.

**** application data: y bytes

taking up the remainder of the frame after any "extension data".

*** client-to-server masking

the masking key is contained completely within the frame.

the masking key is a 32-bit value chosen at random by the client.

to convert masked data into unmasked data, or vice versa, the following algorithm is applied.

the same algorithm applies regardless of the direction of the translation.

the same steps are applied to mask the data as to unmask the data.

the masking does not affect the length of the "payload data".

the payload length, indicated in the framing as frame-payload-length, does NOT include the length of the masking key.
it is the length of the "payload data", e.g., the number of bytes following the masking key.

*** fragmentation

the primary purpose of fragmentation is to allow sending a message that is of unknown size when the message is started without having to buffer that message.

if messages couldn't be fragmented, then an endpoint would have to buffer the entire message so its length could be counted before the first byte is sent.

with fragmentation, a server or intermediary may choose a reasonable size buff and, when the buffer is full, write a fragment to the network.

rules:
1. an unfragmented message consists of a single frame with the FIN bit set and an opcode other than 0.
2. a fragmented message consists of a single frame with the FIN bit clear and an opcode other than 0, followed by zero or more frames with the FIN bit clear and an opcode set to 0, and terminated by a single frame with the FIN bit set and an opcode of 0. A fragmented message is conceptually equivalent to a single larger message whose payload is equal to the concatenation of the payloads of the fragments in order.
3. control frames MAY be injected in the middle of a fragmented message. control frames themselves MUST NOT be fragmented.
4. message fragments MUST be delivered to the recipient in the order sent by the sender.


NOTE: if control frames could not be interjected, the latency of a ping, for example, would be very long if behind a large message.

*** control frames

control frames are identified by opcodes where the most significant bit of the opcode is 1.

currently defined opcodes for control frames include 0x8(Close), 0x9(Ping), and 0xA(Pong).

control frames are used to communicate state about the websocket.

control frames can be interjected in the middle of a fragmented message.

all control frames MUST have a payload length of 125 bytes or less and MUST NOT be fragmented.

**** close

0x8

the Close frame MAY contain a body that indicates a reason for closing, such as an endpoint shutting down,
an endpoint having received a frame too large, or an endpoint having received a frame that does not conform to the format expected by the endpoint.

if there is a body, the first two bytes of the body MUST be a 2-byte unsigned integer representing a status code with value /code/ defined in 7.4. following the 2-byte integer, the body MAY contain UTF-8-encoded data with value /reason/.

the application MUST NOT send any more data frames after sending a Close frame.

if an endpoint receives a Close frame and did not previously send a Close frame, the endpoint MUST send a Close frame in response.

after both sending and receiving a Close message, an endpoint considers the WebSocket connection closed and MUST close the underlying TCP connection.

the server MUST close the underlying TCP connection immediately. the client SHOULD wait for the server to close the connection but MAY close the connection at any time after sending and receiving a Close message, e.g., if it has not received a TCP Close from the server in a reasonable time period.

**** ping

NOTE: a ping frame may serve either as a keepalive or as a means to verify that the remote endpoint is still responsive.

**** pong

a Pong frame sent in response to a Ping frame must have identical "Application data" as found in the message body of the Ping frame being replied to.

if an endpoint receives a Ping frame and has not yet sent Pong frame(s) in response to previous Ping frame(s), the endpoint MAY elect to send a Pong frame for only the most recently processed Ping frame.

a Pong frame MAY be sent unsolicited. This serves as a unidirectional heartbeat.

a response to an unsolicited Pong frame is not expected.

*** data frames

data frames (e.g., non-control frames) are identified by opcodes where the most significant bit of the opcode is 0.
Currently defined opcodes for data frames include 0x1 (Text), 0x2 (Binary). 

**** Text

the "Payload data" is text data encoded as UTF-8.

note that a particular text frame might include a partial UTF-8 sequence;

however, the whole message MUST contain valid UTF-8.

**** Binary

The "Payload data" is arbitrary binary data whose interpretation is solely up to the application layer.


*** examples

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-------+-+-------------+-------------------------------+
     |F|R|R|R| opcode|M| Payload len |    Extended payload length    |
     |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
     |N|V|V|V|       |S|             |   (if payload len==126/127)   |
     | |1|2|3|       |K|             |                               |
     +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
     |     Extended payload length continued, if payload len == 127  |
     + - - - - - - - - - - - - - - - +-------------------------------+
     |                               |Masking-key, if MASK set to 1  |
     +-------------------------------+-------------------------------+
     | Masking-key (continued)       |          Payload Data         |
     +-------------------------------- - - - - - - - - - - - - - - - +
     :                     Payload Data continued ...                :
     + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
     |                     Payload Data continued ...                |
     +---------------------------------------------------------------+


**** a single-frame unmasked text message

"Hello"

FIN, 0x1, length: 5
0x81 0x05 0x48 0x65 0x6c 0x6c 0x6f

**** a single-frame masked text message

"Hello"

FIN, 0x1, MASK, length: 5
0x81 0x85 0x37 0xfa 0x21 0x3d 0x7f 0x9f 0x4d 0x51 0x58

**** a fragmented unmasked text message

0x01 0x03 0x48 0x65 0x6c "Hel"
0x80 0x02 0x6c 0x6f "lo"

**** unmasked ping request and masked ping response

FIN, PING, 
0x89 0x05 0x48 0x65 0x6c 0x6f


**** 256 bytes binary message in a single unmasked frame

**** 64KiB binary message in a single unmasked frame

** sending and receiving data

** closing the connection

** error handling

** extensions

** security considerations

** IANA considerations
