* 入门

** grep

** awk

*** BEGIN{} section

optional, done before processing

*** main {} section

works on each line of the file


for each line, it sees if there are any pattern-matching instructions

it only operates on lines that match that pattern

otherwise it operates on all lines

awk can do maths and string manipulations

awk supports associative arrays

awk sees each line as being made up of a number of fields, each being separated by a 'field separator'

the field separator is set by the awk internal variable FS

other useful internal variables are NR which is the current record number (ie the line number of the input file)

and NF is the number of fields in the current line

*** END{} section

optional happens after the file reading has finished

*** 列求和

ls -l | awk 'BEGIN {sum=0} {sum=sum+$5} END {print sum}'

注意，{print sum}与{print $sum}不同，$sum表示取值，把sum作为指针。比如当sum是2时，$sum表示第二列。

*** 均值和标准差

you accumulate 'sum_x' and 'sum_x2' inside the main part, and then use the standard formulae to calculate mean and standard deviation in the END part.

AWK provides support for loops (both 'for' and 'while') and for branching (using 'if').

so if you wanted to trim a file and only operate on every 3rd line for instance.

ls -l | awk '{for (i=1;i<3;i++) {getline}; print NR, $0}'

where the 'for' loop uses a 'getline' command to move through the file, and only prints out every 3rd line.

note that as the number of lines of the file is 10, which is not divisible by 3, the final command finishes early and so the final 'print $0' command prints line 10.

*** pattern matching

the pattern comes first, and then the action.

action statements are enclosed in { and }. either the pattern may be missing, or the action may be missing.

AWK patterns include regular expressions (uses same syntax as 'grep -E') and combinations using the special symbols '&&', '||', '!'

can also do relational patterns, groups of patterns, ranges

*** AWK control statements

if (condition) statement [ else statement ]
while (condition) statement
do statement while (condition)
for (expr1; expr2; expr3) statement
for (var in array) statement
break
continue

exit [ expression ]

*** AWK input/output statements

*** AWK numeric functions

*** AWK string functions

*** AWK command-line and usage

*** 给单词加引号

echo  "imix, ik, akbal, kan, chicchan, cimi, manik, lamat, muluk, ok, chuen, eb, ben, ix, mem, cib, caban, eznab, canac, ahau" | awk -F ', ' '{for(i=1;i<=NF;i++) {printf "\"%s\",", $i}; print ""}'

print "" 是换行。print后面不加参数是打印$0。

for loop中i要从1开始。因为$0表示current record。

** sed

perhaps the most useful feature is to do a 'search-and-replace' for one string to another.

you can embed your sed commands into the command-line that invokes sed using the '-e' option, or put them in a separate file (-e script, add the script to the commands to be executed)

e.g. 'sed.in' and invoke sed using the '-f sed.in' option.

this latter option is most used if the sed commands are complex and involve lots of regexps!

* sed and awk

