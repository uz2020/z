* handshake protocol overview

the cryptographic parameters of the session state are produced by the TLS Handshake Protocol, which operates on top of the TLS record layer.

when a TLS client and server first start communicating, they agree on a protocol version, select cryptographic algorithms, optinally authenticate each other, and use public-key encryption techniques to generate shared secrets.

** steps

1. exchange hello messages to agree on algorithms, exchange random values, and check for session resumption.
2. exchange the necessary cryptographic parameters to allow the client and server to agree on a premaster secret.
3. exchange certificates and cryptographic information to allow the client and server to authenticate themselves
4. generate a master secret from the premaster secret and exchanged random values
5. provide security parameters to the record layer.


* signature algorithms

the client uses the "signature_algorithms" extension to indicate to the server which signature/hash algorithm pairs may be used in digital signatures.

the "extension_data" field of this extension contains a "supported_signature_algorithms" value.

* server certificates

when this message will be sent:

the server MUST send a certificate message whenever the agreed-upon key exchange method uses certificates for authentication. this message will always immediately follow the ServerHello message

meaning of this message:

this message conveys the server's certificate chain to the client
the certificate MUST be appropriate for the negotiated cipher suite's key exchange algorithm and any negotiated extensions.


the same message type and structure will be used for the client's response to a certificate request message. Note that a client MAY send no certificates if it does not have an appropriate certificate to send in response to the server's authtentication request.


the following rules apply to the certificates sent by the server:
1. the certificate type MUST be X.509v3
2. the end entity certificate's public key MUST be compatible with the selected key exchange algorithm.


#+BEGIN_SRC
      Client                                                Server

      ClientHello                   -------->
                                                       ServerHello
                                                [ChangeCipherSpec]
                                    <--------             Finished
      [ChangeCipherSpec]
      Finished                      -------->
      Application Data              <------->     Application Data

          Figure 2.  Message flow for an abbreviated handshake
#+END_SRC


a cipher suites that specify new key exchange methods are specified for the TLS protocol, they will imply the certificate format and the required encoded keying information.

* server key exchange messsage

when this message will be sent:

this message will be sent immediately after the server certificate message.

the ServerKeyExchange message is sent by the server only when the server Certificate message does not contain enough data to allow the client to exchange a premaster secret.


meaning of this message:

this message conveys cryptographic information to allow the client to communicate the premaster secret: a Diffie-Helloman public key with which the client can complete a key exchange or a public key for some other algorithm.


* key exchange algorithms

* premaster secret


* server hello done

when this message will be sent:

the ServerHelloDone message is sent by the server to indicate the end of the ServerHello and associated messages. After sending this message, the server will wait for a client response.

meaning of this message:

this message means that the server is done sending messages to support the key exchange, and the client can proceed with its phase of the key exchange.

upon receipt of the ServerHelloDone message, the client SHOULD verify that the server provided a valid certificate, if required, and check that the server hello parameters are acceptable.


* client certificate

also, if some aspect of the certificate chain was unacceptable (e.g., it was not signed by a known, trusted CA), the server MAY at its discretion either continue the handshake or send a fatal alert.

* client key exchange message

when this message will be sent:

this message is always sent by the client. it MUST immediately follow the client certificate message, if it is sent. Otherwise, it MUST be the first message sent by the client after it receives the ServerHelloDone message.


meaning of this message:

with this message, the premaster secret is set, either by direct transmission of the RSA-encrypted secret or by the transmission of Diffie-Helloman parameters that will allow each side to agree upon the same premaster secret.


* certificate verify

* forward secrecy

perfect forward secrecy (PFS), also called forward secrecy (FS), refers to an encryption system that changes the keys used to encrypt and decrypt information frequently and automatically.

this ongoing process ensures that even if the most recent key is hacked, a minimal amount of sensitive data is exposed.


** RSA key exchange and authentication

with RSA, key exchange and server authentication are combined.
the public key is contained in the server's certificate.

Note that compromise of the server's static RSA key results in a loss confidentiality for all sessions protected under that static key.

TLS users desiring Perfect Forward Secrecy should use DHE cipher suites.

after verifying the server's certificate, the client encrypts a pre_master_secret with the server's public key.

by sucessfully decoding the pre_master_secret and producing a correct Finished message, the server demonstrates that it knows the private key corresponding to the server certificate.


* finished

when this message will be sent

a finished message is always sent immediately after a change cipher spec message to verify that the key exchange and authentication processes were sucessful.


https://stackoverflow.com/questions/41266476/ios-ssl-handshake-client-certificate-nsurlsession-nsurlerrordomain-code


Similar scenario with iOS14.
The SSL certificate is approved for a subdomain with a wild card (*.enabley.io). We noticed that when the prefix of the wildcard contains underscore (e.g. better_office.enabley.io), the certificate is not recognized. However when the prefix doesn't contain underscore (betteroffice.enabley.io), everything works perfectly.

Any clues?

Another reason why we faced the same issue with the newest iOS devices: Apple doesn't allow underscores (_) in domain names.

https://github.com/microsoft/appcenter-sdk-apple/issues/2368
